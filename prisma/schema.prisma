generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique @db.VarChar(255)
  password       String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Booking        Booking[]
  Enrollment     Enrollment?
  Session        Session[]
  UserActivities UserActivities[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  cpf       String   @db.VarChar(255)
  birthday  DateTime
  phone     String   @db.VarChar(255)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address   Address?
  Ticket    Ticket[]
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model TicketType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  price         Int
  isRemote      Boolean
  includesHotel Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Ticket        Ticket[]
}

model Ticket {
  id           Int          @id @default(autoincrement())
  ticketTypeId Int
  enrollmentId Int
  status       TicketStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  TicketType   TicketType   @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  Payment      Payment[]
}

model Payment {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  value          Int
  cardIssuer     String
  cardLastDigits String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Ticket         Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rooms     Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  hotelId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Hotel     Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Booking   Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teste {
  id   Int    @id @default(autoincrement())
  name String
}

model Activities {
  id                 Int                @id(map: "Activities_pk") @default(autoincrement())
  name               String
  slot               Int
  scheduleId         Int
  createdAt          DateTime?          @default(dbgenerated("'2023-05-23 22:15:35.995523'::timestamp without time zone")) @db.Timestamp(6)
  updatedAt          DateTime?          @default(dbgenerated("'2023-05-23 22:15:35.995523'::timestamp without time zone")) @db.Timestamp(6)
  ActivitiesSchedule ActivitiesSchedule @relation(fields: [scheduleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Activities_fk0")
  UserActivities     UserActivities[]
}

model ActivitiesLocal {
  id                 Int                  @id(map: "ActivitiesLocal_pk") @default(autoincrement())
  name               String
  ActivitiesSchedule ActivitiesSchedule[]
}

model ActivitiesSchedule {
  id              Int             @id(map: "ActivitiesSchedule_pk") @default(autoincrement())
  startsAt        DateTime        @db.Date
  endsAt          DateTime        @db.Date
  localId         Int
  ActivitiesLocal ActivitiesLocal @relation(fields: [localId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ActivitiesSchedule_fk0")
  Activities      Activities[]
}

model UserActivities {
  id         Int        @id(map: "UserActivities_pk") @default(autoincrement())
  userId     Int
  activityId Int
  Activities Activities @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserActivities_fk1")
  User       User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserActivities_fk0")
}

enum TicketStatus {
  RESERVED
  PAID
}
